diff --git a/CorsixTH/CMakeLists.txt b/CorsixTH/CMakeLists.txt
index dfdb59e..87c13f6 100755
--- a/CorsixTH/CMakeLists.txt
+++ b/CorsixTH/CMakeLists.txt
@@ -36,7 +36,6 @@ ENDIF(UNIX)
 # Modify the config.h based upon our selection of options
 CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/CorsixTH/Src/config.h.in ${CMAKE_BINARY_DIR}/CorsixTH/Src/config.h)
 INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/CorsixTH/Src/)
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/agg/include/)
 
 # Generate source files list
 # Note: Done after generating config.h
@@ -54,7 +53,6 @@ FILE(GLOB_RECURSE corsixth_source_files
   ${CMAKE_SOURCE_DIR}/CorsixTH/CorsixTH.rc
   ${CMAKE_SOURCE_DIR}/LFS/*.c
   ${CMAKE_SOURCE_DIR}/LPEG/*.c
-  ${CMAKE_SOURCE_DIR}/agg/src/agg_image_filters.cpp
 )
 
 # Declaration of the executable
@@ -159,6 +157,18 @@ IF(CORSIX_TH_USE_OGL_RENDERER)
     message(FATAL_ERROR "Error: OpenGL library not found, it is required to build (consider changing choice of renderer)")
   ENDIF(OPENGL_FOUND)
 ENDIF(CORSIX_TH_USE_OGL_RENDERER)
+IF(CORSIX_TH_USE_SDL_RENDERER)
+  # Find AGG
+  set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules/")
+
+  FIND_PACKAGE(AGG REQUIRED)
+  IF(AGG_FOUND)
+    TARGET_LINK_LIBRARIES(CorsixTH ${AGG_LIBRARIES})
+    INCLUDE_DIRECTORIES(${AGG_INCLUDE_DIR})
+  ELSE(AGG_FOUND)
+    message(FATAL_ERROR "Error: AGG library not found, but required to build")
+  ENDIF(AGG_FOUND)
+ENDIF(CORSIX_TH_USE_SDL_RENDERER)
 
 # Declaration of the install process
 IF(APPLE)
diff --git a/CorsixTH/Src/th_gfx_sdl.cpp b/CorsixTH/Src/th_gfx_sdl.cpp
index 33ce9f8..8ebc00b 100755
--- a/CorsixTH/Src/th_gfx_sdl.cpp
+++ b/CorsixTH/Src/th_gfx_sdl.cpp
@@ -27,14 +27,14 @@ SOFTWARE.
 #include "th_gfx_font.h"
 #endif
 #include "th_map.h"
-#include "agg_rendering_buffer.h"
-#include "agg_pixfmt_rgb.h"
-#include "agg_renderer_base.h"
-#include "agg_span_interpolator_linear.h"
-#include "agg_span_image_filter_rgb.h"
-#include "agg_scanline_p.h"
-#include "agg_renderer_scanline.h"
-#include "agg_span_allocator.h"
+#include "agg2/agg_rendering_buffer.h"
+#include "agg2/agg_pixfmt_rgb.h"
+#include "agg2/agg_renderer_base.h"
+#include "agg2/agg_span_interpolator_linear.h"
+#include "agg2/agg_span_image_filter_rgb.h"
+#include "agg2/agg_scanline_p.h"
+#include "agg2/agg_renderer_scanline.h"
+#include "agg2/agg_span_allocator.h"
 #include <new>
 
 THRenderTarget::THRenderTarget()
diff --git a/cmake_modules/FindAGG.cmake b/cmake_modules/FindAGG.cmake
new file mode 100644
index 0000000..86d5618
--- /dev/null
+++ b/cmake_modules/FindAGG.cmake
@@ -0,0 +1,53 @@
+# - Try to find the AGG graphics library
+# Once done this will define
+#
+#  AGG_FOUND - system has AGG
+#  AGG_INCLUDE_DIR - the AGG include directory
+#  AGG_LIBRARIES - Link these to use AGG
+#  AGG_DEFINITIONS - Compiler switches required for using AGG
+
+# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+if (AGG_INCLUDE_DIR AND AGG_LIBRARIES)
+
+  # in cache already
+  set(AGG_FOUND TRUE)
+
+else (AGG_INCLUDE_DIR AND AGG_LIBRARIES)
+  if (NOT WIN32)
+    # use pkg-config to get the directories and then use these values
+    # in the FIND_PATH() and FIND_LIBRARY() calls
+    find_package(PkgConfig)
+    pkg_check_modules(PC_AGG QUIET libagg) 
+
+    set(AGG_DEFINITIONS ${PC_AGG_CFLAGS_OTHER})
+  endif (NOT WIN32)
+
+  find_path(AGG_INCLUDE_DIR agg2/agg_pixfmt_gray.h
+    PATHS ${PC_AGG_INCLUDEDIR} ${PC_AGG_INCLUDE_DIRS}
+  )
+  
+  find_library(AGG_LIBRARIES NAMES agg
+    PATHS ${PC_AGG_LIBDIR} ${PC_AGG_LIBRARY_DIRS}
+  )
+  
+  if (AGG_INCLUDE_DIR AND AGG_LIBRARIES)
+     set(AGG_FOUND TRUE)
+  endif (AGG_INCLUDE_DIR AND AGG_LIBRARIES)
+  
+  if (AGG_FOUND)
+    if (NOT AGG_FIND_QUIETLY)
+      message(STATUS "Found AGG: ${AGG_LIBRARIES}")
+    endif (NOT AGG_FIND_QUIETLY)
+  else (AGG_FOUND)
+    if (AGG_FIND_REQUIRED)
+      message(FATAL_ERROR "Could NOT find AGG")
+    endif (AGG_FIND_REQUIRED)
+  endif (AGG_FOUND)
+  
+  mark_as_advanced(AGG_INCLUDE_DIR AGG_LIBRARIES)
+  
+endif (AGG_INCLUDE_DIR AND AGG_LIBRARIES)
