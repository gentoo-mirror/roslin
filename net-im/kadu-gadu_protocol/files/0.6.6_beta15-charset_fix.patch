From 2cda887e00d91b53f40d4035cb3672205d8c56a9 Mon Sep 17 00:00:00 2001
From: Bartosz Brachaczek <b.brachaczek@gmail.com>
Date: Wed, 2 Feb 2011 03:03:36 +0100
Subject: [PATCH] gadu: Use QString rather than QByteArray when reading received message formatting

It's needed because text position in formatting data treats Unicode
characters as one character, not as two bytes like we did before.

It also fixes message encoding in case we don't even try to read
formatting (there was a bug in that code path not creating a QString
with QString::fromUtf8()). It was the case when the sender wasn't on our
contact list and also for Blip (I'm not sure why).

Signed-off-by: Bartosz Brachaczek <b.brachaczek@gmail.com>
---
 ChangeLog                                          |    1 +
 modules/gadu_protocol/helpers/gadu-formatter.cpp   |   10 +++++-----
 modules/gadu_protocol/helpers/gadu-formatter.h     |    2 +-
 .../gadu_protocol/services/gadu-chat-service.cpp   |    6 +++---
 modules/gadu_protocol/services/gadu-chat-service.h |    2 +-
 5 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/modules/gadu_protocol/helpers/gadu-formatter.cpp b/modules/gadu_protocol/helpers/gadu-formatter.cpp
index 676e2bf..af49812 100644
--- a/modules/gadu_protocol/helpers/gadu-formatter.cpp
+++ b/modules/gadu_protocol/helpers/gadu-formatter.cpp
@@ -141,7 +141,7 @@ unsigned char * createFormats(Account account, const FormattedMessage &message,
 	return result;
 }
 
-static void appendToMessage(Account account, FormattedMessage &result, UinType sender, const QByteArray &content,
+static void appendToMessage(Account account, FormattedMessage &result, UinType sender, const QString &content,
 		struct gg_msg_richtext_format &format,
 		struct gg_msg_richtext_color &color, struct gg_msg_richtext_image &image, bool receiveImages)
 {
@@ -190,8 +190,8 @@ static void appendToMessage(Account account, FormattedMessage &result, UinType s
 			textColor.setBlue(color.blue);
 		}
 
-		result << FormattedMessagePart(QString::fromUtf8(content),
-				format.font & GG_FONT_BOLD, format.font & GG_FONT_ITALIC, format.font & GG_FONT_UNDERLINE, textColor);
+		result << FormattedMessagePart(content, format.font & GG_FONT_BOLD,
+				format.font & GG_FONT_ITALIC, format.font & GG_FONT_UNDERLINE, textColor);
 	}
 }
 
@@ -205,7 +205,7 @@ QString createImageId(unsigned int sender, unsigned int size, unsigned int crc32
 		.arg(crc32);
 }
 
-FormattedMessage createMessage(Account account, UinType sender, const QByteArray &content,
+FormattedMessage createMessage(Account account, UinType sender, const QString &content,
 		unsigned char *formats, unsigned int size, bool receiveImages)
 {
 	FormattedMessage result;
@@ -235,7 +235,7 @@ FormattedMessage createMessage(Account account, UinType sender, const QByteArray
 		textPosition = gg_fix16(format.position);
 
 		if (first && format.position > 0)
-			result << FormattedMessagePart(QString::fromUtf8(content.left(textPosition)), false, false, false, QColor());
+			result << FormattedMessagePart(content.left(textPosition), false, false, false, QColor());
 
 		if (format.font & GG_FONT_IMAGE)
 		{
diff --git a/modules/gadu_protocol/helpers/gadu-formatter.h b/modules/gadu_protocol/helpers/gadu-formatter.h
index 6a3aed3..b76dab7 100644
--- a/modules/gadu_protocol/helpers/gadu-formatter.h
+++ b/modules/gadu_protocol/helpers/gadu-formatter.h
@@ -33,7 +33,7 @@ namespace GaduFormatter
 
 	QString createImageId(GaduProtocol::UinType sender, unsigned int size, unsigned int crc32);
 
-	FormattedMessage createMessage(Account acccount, GaduProtocol::UinType sender, const QByteArray &content, unsigned char *formats,
+	FormattedMessage createMessage(Account acccount, GaduProtocol::UinType sender, const QString &content, unsigned char *formats,
 			unsigned int size, bool receiveImages);
 
 };
diff --git a/modules/gadu_protocol/services/gadu-chat-service.cpp b/modules/gadu_protocol/services/gadu-chat-service.cpp
index 5eb8236..9d0015d 100644
--- a/modules/gadu_protocol/services/gadu-chat-service.cpp
+++ b/modules/gadu_protocol/services/gadu-chat-service.cpp
@@ -229,12 +229,12 @@ bool GaduChatService::ignoreImages(Contact sender)
 		);
 }
 
-FormattedMessage GaduChatService::createFormattedMessage(struct gg_event *e, QByteArray &content, Contact sender)
+FormattedMessage GaduChatService::createFormattedMessage(struct gg_event *e, const QByteArray &content, Contact sender)
 {
 	if (ignoreRichText(sender))
-		return GaduFormatter::createMessage(Protocol->account(), sender.id().toUInt(), content, 0, 0, false);
+		return GaduFormatter::createMessage(Protocol->account(), sender.id().toUInt(), QString::fromUtf8(content), 0, 0, false);
 	else
-		return GaduFormatter::createMessage(Protocol->account(), sender.id().toUInt(), content,
+		return GaduFormatter::createMessage(Protocol->account(), sender.id().toUInt(), QString::fromUtf8(content),
 				(unsigned char *)e->event.msg.formats, e->event.msg.formats_length, !ignoreImages(sender));
 }
 
diff --git a/modules/gadu_protocol/services/gadu-chat-service.h b/modules/gadu_protocol/services/gadu-chat-service.h
index 1256bc4..ebea2bb 100644
--- a/modules/gadu_protocol/services/gadu-chat-service.h
+++ b/modules/gadu_protocol/services/gadu-chat-service.h
@@ -48,7 +48,7 @@ class GaduChatService : public ChatService
 	QByteArray getContent(struct gg_event *e);
 	bool ignoreRichText(Contact sender);
 	bool ignoreImages(Contact sender);
-	FormattedMessage createFormattedMessage(struct gg_event *e, QByteArray &content, Contact sender);
+	FormattedMessage createFormattedMessage(struct gg_event *e, const QByteArray &content, Contact sender);
 
 	void removeTimeoutUndeliveredMessages();
 
-- 
1.6.1

